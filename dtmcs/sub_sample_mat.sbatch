#!/bin/bash

################################################################################################
### sbatch configuration parameters must start with #SBATCH and must precede any other commands.
### To ignore, just add another # - like so: ##SBATCH
################################################################################################

#SBATCH --partition main			### specify partition name where to run a job. change only if you have a matching qos!! main: all nodes; gtx1080: 1080 gpu card nodes; rtx2080: 2080 nodes; teslap100: p100 nodes; titanrtx: titan nodes
#SBATCH --time 0-20:30:00			### limit the time of job running. Make sure it is not greater than the partition time limit!! Format: D-H:MM:SS
#SBATCH --job-name bench_mats_$dir			### name of the job
#SBATCH --output logs/mat_sampling-nand-%J.out			### output log for running job - %J for job number
#SBATCH --gpus=0				### number of GPUs, allocating more than 1 requires IT team's permission. Example to request 3090 gpu: #SBATCH --gpus=rtx_3090:1

# Note: the following 4 lines are commented out
##SBATCH --mail-user=user@post.bgu.ac.il	### user's email for sending job status messages
##SBATCH --mail-type=ALL			### conditions for sending the email. ALL,BEGIN,END,FAIL, REQUEU, NONE
#SBATCH --mem=32G				### ammount of RAM memory, allocating more than 60G requires IT team's permission


################  Following lines will be executed by a compute node    #######################

### Print some data to output file ###
echo `date`
echo -e "\nSLURM_JOBID:\t\t" $SLURM_JOBID
echo -e "SLURM_JOB_NODELIST:\t" $SLURM_JOB_NODELIST "\n\n"

### Start your code below ####
module load anaconda				### load anaconda module (must be present when working with conda environments)
source activate conditioned_sampling				### activate a conda environment, replace my_env with your conda environment

script="$HOME/conditioned/graph-sampling/sparse_mat_sample.py"
dir=nand;

for dir in $dir; do # egl herman leader_sync nand; do
  for file in "$dir"/*.drn; do
    for length in 8 16 32 64 128; do
        echo "--- $file - $length ---"
        python $script "$file" $length -repeats 5000
    done
  done
done
