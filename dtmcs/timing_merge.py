# -*- coding: utf-8 -*-
"""conditioned_merge.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10lyk8zpIPaVD1iXORjw4HOXjUGaMHvwL
"""

import numpy as np
import pandas as pd

mat_df = pd.read_csv('mat_timing.csv')
mat_df.columns = [s.strip() for s in mat_df.columns]
mat_df = mat_df[~mat_df['params'].isin(['16_2', '64_2', '5_5'])] # remove manually created runs
mat_df = mat_df
for i, row in mat_df.iterrows():
    if row['newmat'] > 2:
       mat_df.loc[i, 'precomp_time'] += mat_df.loc[i-1, 'precomp_time']
mat_df.drop('newmat', axis=1, inplace=True)
mat_df.replace(-1, np.nan, inplace=True)
mat_df.head()

add_df = pd.read_csv('add_timing.csv')
add_df.replace(-1, np.nan, inplace=True)
add_df.head()

sim_df = pd.read_csv('sim_timing.csv')
sim_df['params'] = sim_df['params'].str.replace('=','_').str.replace(' ','_')
sim_df.replace(-1, np.nan, inplace=True)
sim_df.head()

merge1 = pd.merge(mat_df,add_df, on=['name','params','length'], how='outer', suffixes=('_mat','_add'))
merge2 = pd.merge(merge1, sim_df, on=['name', 'params','length'], how='outer', suffixes=('','_sim'))
merge2[['length', 'states', 'trans', 'vars_per_state', 'add_size', 'suc_count']] = merge2[['length', 'states', 'trans', 'vars_per_state', 'add_size', 'suc_count']].astype('Int64')
merge2['params'] = merge2['params'].str.replace('sync', '')
merge2.head(n=20)

model_df = pd.read_csv('models.csv')
model_df['model_consts'] = model_df['model_consts'].str.replace('=','_').str.replace(',','_')
model_df['model_file'] = model_df['model_file'].str.replace('.pm', '')
model_df.head()

import re

# Define a function to split the string at the first digit
def split_at_first_digit(text):
    if isinstance(text, str):
        match = re.search(r'\d', text)
        if match:
            split_index = match.start()
            return text[:split_index], text[split_index:]
    return text, None

# Apply the function to the 'model_consts' column and create new columns
model_df[['model_name', 'model_params']] = model_df['model_file'].apply(lambda x: pd.Series(split_at_first_digit(x)))

model_df.replace('leader_sync', 'leader', inplace=True)
model_df['model_consts'] = model_df['model_params'].where(~model_df['model_params'].isna(), model_df['model_consts'])
model_df['model_file'] = model_df['model_name']
model_df.drop(['model_type', 'model_name', 'model_params'], axis=1, inplace=True)
model_df = model_df[model_df['states'] < 233832446]
model_df.head()

tmp = merge2.merge(model_df, right_on=['model_file', 'model_consts'], left_on=['name', 'params'], how='outer',
                   suffixes=('', '_real'))
tmp['states'] = tmp['states_real']
merge3 = tmp.iloc[:,:-4]
merge3.to_csv('timing_all.csv')

merge2[merge2['trace_time'] > 0].to_csv('add_worked.csv')